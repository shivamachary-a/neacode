{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/shivam/Desktop/finance/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation authenticateMonzo($code: String!, $state: String!) {\\n  authenticateMonzo(code: $code, state: $state) {\\n    error {\\n      field\\n      message\\n    }\\n    user {\\n      username\\n      id\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport var AuthenticateMonzoDocument = gql(_templateObject());\nexport function useAuthenticateMonzoMutation() {\n  _s();\n\n  return Urql.useMutation(AuthenticateMonzoDocument);\n}\n\n_s(useAuthenticateMonzoMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;","map":{"version":3,"sources":["/home/shivam/Desktop/finance/frontend/src/generated/graphql.tsx"],"names":["gql","Urql","AuthenticateMonzoDocument","useAuthenticateMonzoMutation","useMutation"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AA+LA,OAAO,IAAMC,yBAAyB,GAAGF,GAAH,mBAA/B;AAeP,OAAO,SAASG,4BAAT,GAAwC;AAAA;;AAC7C,SAAOF,IAAI,CAACG,WAAL,CAAgFF,yBAAhF,CAAP;AACD;;GAFeC,4B;UACPF,IAAI,CAACG,W;;;AACb","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSONObject: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  Me?: Maybe<Users>;\n  allUsers: Array<Users>;\n  all: Array<Stocks>;\n  readPortfolio: Array<Scalars['String']>;\n  readWatchlist: Array<Scalars['String']>;\n  overview: Array<SecurityOverview>;\n  newsQuery: Scalars['JSONObject'];\n  getPrice: Scalars['JSONObject'];\n  sectorPerformance: Scalars['JSONObject'];\n  topPerformers: Scalars['JSONObject'];\n  topLosers: Scalars['JSONObject'];\n};\n\n\nexport type QueryOverviewArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type QueryGetPriceArgs = {\n  ticker: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  monzoCode: Scalars['String'];\n};\n\nexport type Stocks = {\n  __typename?: 'Stocks';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  companyName: Scalars['String'];\n  symbol: Scalars['String'];\n};\n\nexport type SecurityOverview = {\n  __typename?: 'securityOverview';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  symbol: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  exchange: Scalars['String'];\n  industry: Scalars['String'];\n  sector: Scalars['String'];\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  logout: Scalars['Boolean'];\n  login: UserResponse;\n  authenticateMonzo: UserResponse;\n  addToPortfolio: StockResponse;\n  addToWatchlist: Scalars['Boolean'];\n  removeFromWatchlist: Scalars['Boolean'];\n  removeFromPortfolio: Scalars['Boolean'];\n  searchEquities: SearchResponse;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\n\nexport type MutationAuthenticateMonzoArgs = {\n  state: Scalars['String'];\n  code: Scalars['String'];\n};\n\n\nexport type MutationAddToPortfolioArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationAddToWatchlistArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationRemoveFromWatchlistArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationRemoveFromPortfolioArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationSearchEquitiesArgs = {\n  symbol: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  error?: Maybe<Array<FieldError>>;\n  user?: Maybe<Users>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type StockResponse = {\n  __typename?: 'StockResponse';\n  error?: Maybe<Array<FieldError>>;\n  stock?: Maybe<Stocks>;\n};\n\nexport type SearchResponse = {\n  __typename?: 'SearchResponse';\n  error?: Maybe<Array<FieldError>>;\n  results?: Maybe<Array<Scalars['JSONObject']>>;\n};\n\nexport type AuthenticateMonzoMutationVariables = Exact<{\n  code: Scalars['String'];\n  state: Scalars['String'];\n}>;\n\n\nexport type AuthenticateMonzoMutation = (\n  { __typename?: 'Mutation' }\n  & { authenticateMonzo: (\n    { __typename?: 'UserResponse' }\n    & { error?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'Users' }\n      & Pick<Users, 'username' | 'id'>\n    )> }\n  ) }\n);\n\n\nexport const AuthenticateMonzoDocument = gql`\n    mutation authenticateMonzo($code: String!, $state: String!) {\n  authenticateMonzo(code: $code, state: $state) {\n    error {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useAuthenticateMonzoMutation() {\n  return Urql.useMutation<AuthenticateMonzoMutation, AuthenticateMonzoMutationVariables>(AuthenticateMonzoDocument);\n};"]},"metadata":{},"sourceType":"module"}