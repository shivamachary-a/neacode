{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const AuthenticateAlpacaDocument = gql`\n    query authenticateAlpaca($code: String!, $state: String!) {\n  authenticateAlpaca(code: $code, state: $state) {\n    error {\n      field\n      message\n    }\n    user {\n      isAlpaca\n    }\n  }\n}\n    `;\nexport function useAuthenticateAlpacaQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: AuthenticateAlpacaDocument\n  }, options));\n}\n;\nexport const AuthenticateMonzoDocument = gql`\n    query authenticateMonzo($code: String!, $state: String!) {\n  authenticateMonzo(code: $code, state: $state) {\n    error {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\nexport function useAuthenticateMonzoQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: AuthenticateMonzoDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/home/shivam/isohelapp/frontend/src/generated/graphql.tsx"],"names":["gql","Urql","AuthenticateAlpacaDocument","useAuthenticateAlpacaQuery","options","useQuery","query","AuthenticateMonzoDocument","useAuthenticateMonzoQuery"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAiOA,OAAO,MAAMC,0BAA0B,GAAGF,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZO;AAcP,OAAO,SAASG,0BAAT,CAAoCC,OAA2E,GAAG,EAAlH,EAAsH;AAC3H,SAAOH,IAAI,CAACI,QAAL;AAAyCC,IAAAA,KAAK,EAAEJ;AAAhD,KAA+EE,OAA/E,EAAP;AACD;AAAA;AACD,OAAO,MAAMG,yBAAyB,GAAGP,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAeP,OAAO,SAASQ,yBAAT,CAAmCJ,OAA0E,GAAG,EAAhH,EAAoH;AACzH,SAAOH,IAAI,CAACI,QAAL;AAAwCC,IAAAA,KAAK,EAAEC;AAA/C,KAA6EH,OAA7E,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSONObject: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  Me?: Maybe<Users>;\n  allUsers: Array<Users>;\n  all: Array<Stocks>;\n  readPortfolio: Array<Scalars['String']>;\n  readWatchlist: Array<Scalars['String']>;\n  overview: Array<SecurityOverview>;\n  newsQuery: Scalars['JSONObject'];\n  getPrice: Scalars['JSONObject'];\n  sectorPerformance: Scalars['JSONObject'];\n  topPerformers: Scalars['JSONObject'];\n  topLosers: Scalars['JSONObject'];\n  getMonzoRedirect: Scalars['String'];\n  monzoComplete: Scalars['JSONObject'];\n  monzoRefreshToken: Scalars['Boolean'];\n  getMonzoAccounts: Scalars['JSONObject'];\n  monzoMe: Scalars['JSONObject'];\n  authenticateMonzo: UserResponse;\n  getAlpacaRedirect: Scalars['String'];\n  authenticateAlpaca: UserResponse;\n};\n\n\nexport type QueryOverviewArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type QueryGetPriceArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type QueryAuthenticateMonzoArgs = {\n  state: Scalars['String'];\n  code: Scalars['String'];\n};\n\n\nexport type QueryAuthenticateAlpacaArgs = {\n  state: Scalars['String'];\n  code: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  isMonzo: Scalars['Boolean'];\n  isAlpaca: Scalars['Boolean'];\n};\n\nexport type Stocks = {\n  __typename?: 'Stocks';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  companyName: Scalars['String'];\n  symbol: Scalars['String'];\n};\n\nexport type SecurityOverview = {\n  __typename?: 'securityOverview';\n  _id: Scalars['String'];\n  id: Scalars['String'];\n  symbol: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  exchange: Scalars['String'];\n  industry: Scalars['String'];\n  sector: Scalars['String'];\n};\n\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  error?: Maybe<Array<FieldError>>;\n  user?: Maybe<Users>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword: UserResponse;\n  forgotPassword: Scalars['Boolean'];\n  register: UserResponse;\n  logout: Scalars['Boolean'];\n  login: UserResponse;\n  addToPortfolio: StockResponse;\n  addToWatchlist: Scalars['Boolean'];\n  removeFromWatchlist: Scalars['Boolean'];\n  removeFromPortfolio: Scalars['Boolean'];\n  searchEquities: SearchResponse;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  newPassword: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  usernameOrEmail: Scalars['String'];\n};\n\n\nexport type MutationAddToPortfolioArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationAddToWatchlistArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationRemoveFromWatchlistArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationRemoveFromPortfolioArgs = {\n  ticker: Scalars['String'];\n};\n\n\nexport type MutationSearchEquitiesArgs = {\n  symbol: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type StockResponse = {\n  __typename?: 'StockResponse';\n  error?: Maybe<Array<FieldError>>;\n  stock?: Maybe<Stocks>;\n};\n\nexport type SearchResponse = {\n  __typename?: 'SearchResponse';\n  error?: Maybe<Array<FieldError>>;\n  results?: Maybe<Array<Scalars['JSONObject']>>;\n};\n\nexport type AuthenticateAlpacaQueryVariables = Exact<{\n  code: Scalars['String'];\n  state: Scalars['String'];\n}>;\n\n\nexport type AuthenticateAlpacaQuery = (\n  { __typename?: 'Query' }\n  & { authenticateAlpaca: (\n    { __typename?: 'UserResponse' }\n    & { error?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'Users' }\n      & Pick<Users, 'isAlpaca'>\n    )> }\n  ) }\n);\n\nexport type AuthenticateMonzoQueryVariables = Exact<{\n  code: Scalars['String'];\n  state: Scalars['String'];\n}>;\n\n\nexport type AuthenticateMonzoQuery = (\n  { __typename?: 'Query' }\n  & { authenticateMonzo: (\n    { __typename?: 'UserResponse' }\n    & { error?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'Users' }\n      & Pick<Users, 'username' | 'id'>\n    )> }\n  ) }\n);\n\n\nexport const AuthenticateAlpacaDocument = gql`\n    query authenticateAlpaca($code: String!, $state: String!) {\n  authenticateAlpaca(code: $code, state: $state) {\n    error {\n      field\n      message\n    }\n    user {\n      isAlpaca\n    }\n  }\n}\n    `;\n\nexport function useAuthenticateAlpacaQuery(options: Omit<Urql.UseQueryArgs<AuthenticateAlpacaQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<AuthenticateAlpacaQuery>({ query: AuthenticateAlpacaDocument, ...options });\n};\nexport const AuthenticateMonzoDocument = gql`\n    query authenticateMonzo($code: String!, $state: String!) {\n  authenticateMonzo(code: $code, state: $state) {\n    error {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useAuthenticateMonzoQuery(options: Omit<Urql.UseQueryArgs<AuthenticateMonzoQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<AuthenticateMonzoQuery>({ query: AuthenticateMonzoDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}